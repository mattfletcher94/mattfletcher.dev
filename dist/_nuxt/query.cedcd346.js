import{s as w,v as y,x as c,y as f}from"./entry.773593e7.js";import{h as m,j as l}from"./json.6b31c119.js";import{w as g}from"./utils.60a35816.js";const s=t=>Array.isArray(t)?t:t?[t]:[],d=["sort","where","only","without"],p=(t,o)=>{const e={...o};for(const r of d)e[r]&&(e[r]=s(e[r]));const n=(r,a=h=>h)=>(...h)=>(e[r]=a(...h),i),i={params:()=>Object.freeze(e),only:n("only",s),without:n("without",s),where:n("where",r=>[...s(e.where),r]),sort:n("sort",r=>[...s(e.sort),...s(r)]),limit:n("limit",r=>parseInt(String(r),10)),skip:n("skip",r=>parseInt(String(r),10)),findOne:()=>t({...e,first:!0}),find:()=>t(e),findSurround:(r,a)=>t({...e,surround:{query:r,...a}}),locale:r=>i.where({_locale:r})};return i},u=t=>{const o=g(`/query/${m(t)}`);return $fetch(o,{method:"GET",responseType:"json",params:{_params:l(t),previewToken:f("previewToken").value}})};function j(t,...o){if(typeof t=="string"){let e=w(y(c(t,...o)));return e=e.replace(/[-[\]{}()*+.,^$\s]/g,"\\$&"),p(u).where({_path:new RegExp(`^${e}`)})}return p(u,t)}export{j as q};
